#!/usr/bin/env bash
#
# Sexier bash prompt by Amerzel
# https://github.com/Amerzel/sexy-bash-prompt
# Forked from https://github.com/twolfson/sexy-bash-prompt

# If we are on a colored terminal
if tput setaf 1 &> /dev/null; then
  # Reset the shell from our `if` check
  tput sgr0 &> /dev/null

  # If you would like to customize your colors, use
  # # Attribution: http://linuxtidbits.wordpress.com/2008/08/11/output-color-on-bash-scripts/
  # for i in $(seq 0 $(tput colors)); do
  #   echo " $(tput setaf $i)Text$(tput sgr0) $(tput bold)$(tput setaf $i)Text$(tput sgr0) $(tput sgr 0 1)$(tput setaf $i)Text$(tput sgr0)  \$(tput setaf $i)"
  # done

  # If the terminal supports at least 256 colors, write out our 256 color based set
  if [[ $(tput colors) -ge 256 ]] &> /dev/null; then
    ROOT_USER_COLOR=$(tput setaf 196)     # RED
    USER_COLOR=$(tput setaf 33)           # BLUE
    PREPOSITION_COLOR=$(tput setaf 244)   # GREY
    DEVICE_COLOR=$(tput setaf 39)         # CYAN
    DIR_COLOR=$(tput setaf 250)           # LIGHTER GREY
    GIT_STATUS_CLEAN=$(tput setaf 76)     # GREEN
    GIT_STATUS_UNSTAGED=$(tput setaf 202) # ORANGE
    GIT_STATUS_STAGED=$(tput setaf 220)   # YELLOW
    PROMPT_COLOR=$(tput setaf 250)        # LIGHTER GREY
    FILL_COLOR=$(tput setaf 244)          # LIGHTER GREY
    VIRTUAL_ENV_COLOR=$(tput setaf 160)   # DARKER RED
  else
  # Otherwise, use colors from our set of 8
    ROOT_USER_COLOR=$(tput setaf 1)     # RED
    USER_COLOR=$(tput setaf 4)          # BLUE
    PREPOSITION_COLOR=$(tput setaf 7)   # WHITE
    DEVICE_COLOR=$(tput setaf 4)        # BLUE
    DIR_COLOR=$(tput setaf 7)           # WHITE
    GIT_STATUS_CLEAN=$(tput setaf 1)    # RED
    GIT_STATUS_UNSTAGED=$(tput setaf 1) # RED
    GIT_STATUS_STAGED=$(tput setaf 1)   # RED
    PROMPT_COLOR=$(tput setaf 7)        # WHITE
    FILL_COLOR=$(tput setaf 7)          # WHITE
    VIRTUAL_ENV_COLOR=$(tput setaf 4)   # BLUE
  fi

  # Save common color actions
  BOLD=$(tput bold)
  RESET=$(tput sgr0)
else
# Otherwise, use ANSI escape sequences for coloring
  # If you would like to customize your colors, use
  # DEV: 30-39 lines up 0-9 from `tput`
  # for i in $(seq 0 109); do
  #   echo -n -e "\033[1;${i}mText$(tput sgr0) "
  #   echo "\033[1;${i}m"
  # done
  ROOT_USER_COLOR="\033[1;31m"     # RED
  USER_COLOR="\033[1;34m"          # BLUE
  PREPOSITION_COLOR="\033[1;90m"   # GREY
  DEVICE_COLOR="\033[1;36m"        # CYAN
  DIR_COLOR="\033[1;90m"           # GREEN
  GIT_STATUS_CLEAN="\033[1;32m"    # GREEN
  GIT_STATUS_UNSTAGED="\033[1;31m" # RED
  GIT_STATUS_STAGED="\033[1;33m"   # YELLOW
  PROMPT_COLOR="\033[1;90m"        # GREY
  FILL_COLOR="\033[1;90m"          # GREY
  VIRTUAL_ENV_COLOR="\033[1;34m"   # BLUE
  BOLD=""
  RESET="\033[m"
fi

# Detect whether the current directory is a git repository.
function is_git_repository {
  git branch > /dev/null 2>&1
}

# Determine the branch/state information for this git repository.
function set_git_branch {
  # Capture the output of the "git status" command.
  git_status="$(git status 2> /dev/null)"

  # Set color based on clean/staged/dirty.
  if [[ ${git_status} =~ "working directory clean" ]]; then
    state="${GIT_STATUS_CLEAN}"
  elif [[ ${git_status} =~ "Changes to be committed" ]]; then
    state="${GIT_STATUS_STAGED}"
  else
    state="${GIT_STATUS_UNSTAGED}"
  fi

  # Set arrow icon based on status against remote.
  remote_pattern="# Your branch is (ahead|behind)+ "
  if [[ ${git_status} =~ ${remote_pattern} ]]; then
    if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
      remote="↑"
    else
      remote="↓"
    fi
  else
    remote=""
  fi
  diverge_pattern="# Your branch and (.*) have diverged"
  if [[ ${git_status} =~ ${diverge_pattern} ]]; then
    remote="↕"
  fi

  # Get the name of the branch.
  branch="$(git rev-parse --abbrev-ref HEAD)"

  # Set the final branch string.
  GIT_BRANCH=" ${state}(${branch})${remote}${RESET} "
}

# Symbol displayed at the line of every prompt
function set_prompt_symbol() {
  # If we are root, display `#`. Otherwise, `$`
  if test $1 -eq 0 ; then
    if [[ $UID == 0 ]]; then
      PROMPT_SYMBOL="${PROMPT_COLOR}\#${RESET}"
    else
      PROMPT_SYMBOL="${PROMPT_COLOR}\$${RESET}"
    fi
  else
    if [[ $UID == 0 ]]; then
      PROMPT_SYMBOL="${ROOT_USER_COLOR}\#${RESET}"
    else
      PROMPT_SYMBOL="${ROOT_USER_COLOR}\$${RESET}"
    fi
  fi
}

# Dynamic USER_COLOR
function get_user_color() {
  # If we are root, display ROOT_USER_COLOR. Otherwise, USER_COLOR
  if [[ $UID == 0 ]]; then
    echo $ROOT_USER_COLOR
  else
    echo $USER_COLOR
  fi
}

# Determine active Python virtualenv details.
function set_virtualenv () {
  if test -z "$VIRTUAL_ENV" ; then
    PYTHON_VIRTUAL_ENV=""
  else
    PYTHON_VIRTUAL_ENV="${VIRTUAL_ENV_COLOR}[`basename \"$VIRTUAL_ENV\"`]${RESET} "
  fi
}

function prompt_command() {
  # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the
  # return value of the last command.
  set_prompt_symbol $?

  # Set the PYTHON_VIRTUALENV variable.
  set_virtualenv

  # Set the BRANCH variable.
  if is_git_repository ; then
    set_git_branch
  else
    GIT_BRANCH=' '
  fi

  # create a $fill of all screen width minus the time string and a space:
  let FILLSIZE=${COLUMNS}-9
  FILL=""
  while [ "$FILLSIZE" -gt "0" ]
  do
    FILL="-${FILL}" # fill with dashes to work on
    let FILLSIZE=${FILLSIZE}-1
  done

  # Define the sexier-bash-prompt
  export PS1="\[$FILL_COLOR\]$FILL \t\n\
\[$PYTHON_VIRTUAL_ENV\]\
\[$(get_user_color)\]\u\
\[$PREPOSITION_COLOR\]@\
\[$DEVICE_COLOR\]\h \
\[$PREPOSITION_COLOR\]\
\[$DIR_COLOR\]\w\
\[$PREPOSITION_COLOR\]\
\[$GIT_BRANCH\]\n\
\[$PROMPT_SYMBOL\] "

}

PROMPT_COMMAND=prompt_command
