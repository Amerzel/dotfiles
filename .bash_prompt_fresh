#!/usr/bin/env bash

# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

prompt_git() {
    local s='';
    local branchName='';

    # Check if the current directory is in a Git repository.
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

            # Ensure the index is up to date.
            git update-index --really-refresh -q &>/dev/null;

            # Check for uncommitted changes in the index.
            if ! $(git diff --quiet --ignore-submodules --cached); then
                s+="${yellow}+";
            fi;

            # Check for unstaged changes.
            if ! $(git diff-files --quiet --ignore-submodules --); then
                s+="${red}!";
            fi;

            # Check for untracked files.
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s+="${cyan}?";
            fi;

            # Check for stashed files.
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                s+="${violet}$";
            fi;

        fi;

        # Get the short symbolic ref.
        # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
        # Otherwise, just give up.
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
            git rev-parse --short HEAD 2> /dev/null || \
            echo '(unknown)')";

        [ -n "${s}" ] && s=" ${grey}[${s}${grey}]";

        echo -e "${1}${branchName}${s}";
    else
        return;
    fi;
}

prompt_fill() {
  # create a $fill of all screen width minus the time string and a space:
  let FILLSIZE=${COLUMNS}-9
  FILL=""
  while [ "$FILLSIZE" -gt "0" ]
  do
    FILL="-${FILL}" # fill with dashes to work on
    let FILLSIZE=${FILLSIZE}-1
  done

    echo -e "${darkgrey}${FILL}";
}

if tput setaf 1 &> /dev/null; then
    tput sgr0; # reset colors
    bold=$(tput bold);
    reset=$(tput sgr0);
    # Solarized colors, taken from http://git.io/solarized-colors.
    black=$(tput setaf 0);
    darkgrey=$(tput setaf 244);
    grey=$(tput setaf 250);
    blue=$(tput setaf 33);
    cyan=$(tput setaf 37);
    green=$(tput setaf 64);
    orange=$(tput setaf 166);
    purple=$(tput setaf 125);
    red=$(tput setaf 124);
    violet=$(tput setaf 61);
    white=$(tput setaf 15);
    yellow=$(tput setaf 136);
else
    bold='';
    reset="\e[0m";
    black="\e[1;30m";
    blue="\e[1;34m";
    cyan="\e[1;36m";
    green="\e[1;32m";
    orange="\e[1;33m";
    purple="\e[1;35m";
    red="\e[1;31m";
    violet="\e[1;35m";
    white="\e[1;37m";
    yellow="\e[1;33m";
fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
    userStyle="${red}";
else
    userStyle="${blue}";
fi;

# Set the terminal title and prompt.
PS1="";
PS1+="\[\033]0;\W\007\]"; # working directory base name
PS1+="\n"; # newline
PS1+="\$(prompt_fill) \t\n"; # fill
PS1+="\[${userStyle}\]\u"; # username
PS1+="\[${grey}\]@";
PS1+="\[${cyan}\]\h "; # host
PS1+="\[${grey}\]\w "; # working directory full path
PS1+="\$(prompt_git \"\[${orange}\]\" \"\[${blue}\]\")"; # Git repository details
PS1+="\n";
PS1+="\[${grey}\]\$ \[${reset}\]"; # `$` (and reset color)
export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;

# temp
PROMPT_COMMAND=
